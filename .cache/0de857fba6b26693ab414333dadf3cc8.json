{"id":"stopwatch.js","dependencies":[{"name":"C:\\Users\\Tobiasz\\Desktop\\stopwatch-git\\package.json","includedInParent":true,"mtime":1537970991394},{"name":"C:\\Users\\Tobiasz\\Desktop\\stopwatch-git\\.babelrc","includedInParent":true,"mtime":1537359598288}],"generated":{"js":"var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Stopwatch = function () {\n    function Stopwatch() {\n        _classCallCheck(this, Stopwatch);\n\n        this.elem = this.display(); //main parent (container)\n        this.times = this.time();\n        this.createElements();\n        this.handleElements();\n        this.counter();\n    }\n\n    _createClass(Stopwatch, [{\n        key: 'start',\n        value: function start() {\n            var _this = this;\n\n            this.myTimer = setInterval(function () {\n                _this.times.miliseconds++;\n                _this.calculate();\n                _this.counter();\n            }, 10);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            clearInterval(this.myTimer);\n        }\n    }, {\n        key: 'lop',\n        value: function lop() {\n            if (this.times.miliseconds != 0) {\n                var li = document.createElement('li');\n                this.elem.childNodes[6].appendChild(li);\n                li.innerHTML = this.show;\n            }\n        }\n    }, {\n        key: 'clearLop',\n        value: function clearLop() {\n            var li_Elem = this.elem.childNodes[6].children.length;\n            if (li_Elem != 0) {\n                var i = li_Elem;\n                while (i) {\n                    i--;\n                    this.elem.childNodes[6].children[i].remove();\n                }\n            }\n        }\n    }, {\n        key: 'clearAll',\n        value: function clearAll() {\n            this.times.minutes = 0;\n            this.times.seconds = 0;\n            this.times.miliseconds = 0;\n            clearInterval(this.myTimer);\n            this.counter();\n            this.clearLop();\n        }\n    }, {\n        key: 'counter',\n        value: function counter() {\n            this.show = this.elem.childNodes[5].innerHTML = '<br>\\n            ' + this.addZero(this.times.minutes) + ':' + this.addZero(this.times.seconds) + ':' + this.addZero(this.times.miliseconds);\n        }\n    }, {\n        key: 'time',\n        value: function time() {\n            var time = {\n                miliseconds: 0,\n                seconds: 0,\n                minutes: 0\n            };\n            return time;\n        }\n    }, {\n        key: 'handleElements',\n        value: function handleElements() {\n            var _this2 = this;\n\n            this.elem.childNodes[0].onclick = function () {\n                _this2.start();\n            };\n            this.elem.childNodes[1].onclick = function () {\n                _this2.stop();\n            };\n            this.elem.childNodes[2].onclick = function () {\n                _this2.lop();\n            };\n            this.elem.childNodes[3].onclick = function () {\n                _this2.clearLop();\n            };\n            this.elem.childNodes[4].onclick = function () {\n                _this2.clearAll();\n            };\n            //NodeList = console.log(this.elem.childNodes)\n        }\n    }, {\n        key: 'addZero',\n        value: function addZero(value) {\n            var result = value.toString();\n            if (result.length < 2) {\n                result = '0' + result;\n            }\n            return result;\n        }\n    }, {\n        key: 'calculate',\n        value: function calculate() {\n            if (this.times.miliseconds >= 100) {\n                this.times.seconds++;\n                this.times.miliseconds = 0;\n            } else if (this.times.seconds >= 60) {\n                this.times.minutes++;\n                this.times.seconds = 0;\n            }\n        }\n    }, {\n        key: 'createElements',\n        value: function createElements() {\n            //we will refer to elements by nodes e.g this.elem.children[0] //this.elem.childNodes[length]\n            var buttonStart = document.createElement('button');\n            var buttonStop = document.createElement('button');\n            var buttonLop = document.createElement('button');\n            var buttonClear = document.createElement('button');\n            var buttonClearLop = document.createElement('button');\n            var span = document.createElement('span');\n            var ul = document.createElement('ul');\n            buttonStart.textContent = 'Start';\n            buttonStop.textContent = 'stop';\n            buttonLop.textContent = 'Lop';\n            buttonClear.textContent = 'Clear All';\n            buttonClearLop.textContent = 'Clear Lop';\n            buttonStart.setAttribute('id', 'btn_start');\n            buttonStop.setAttribute('id', 'btn_stop');\n            buttonLop.setAttribute('id', 'btn_lop');\n            buttonClear.setAttribute('id', 'btn_clear');\n            buttonClearLop.setAttribute('id', 'btn_clearLop');\n            this.elem.appendChild(buttonStart);\n            this.elem.appendChild(buttonStop);\n            this.elem.appendChild(buttonLop);\n            this.elem.appendChild(buttonClearLop);\n            this.elem.appendChild(buttonClear);\n            this.elem.appendChild(span);\n            this.elem.appendChild(ul);\n        }\n    }, {\n        key: 'display',\n        value: function display() {\n            var container = document.createElement('div');\n            container.setAttribute('id', 'container_id');\n\n            return container;\n        }\n    }]);\n\n    return Stopwatch;\n}();\n\nvar stopwatch = new Stopwatch();\ndocument.body.appendChild(stopwatch.elem);","map":null},"hash":"1f1c898f058d98cd00269da44aa82164","cacheData":{"env":{}}}